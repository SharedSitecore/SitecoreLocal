{
    "Parameters": {
        "SiteName": {
            "Type": "string",
            "Description": "The name of the site deployed site in iis."
        },
        "WebRoot": {
            "Type": "string",
            "DefaultValue": "c:\\inetpub\\wwwroot",
            "Description": "The physical path of the configured Web Root for the environment"
        },
        "HostHeader": {
            "Type": "string",
            "Description": "The certificate to use for HTTPS web bindings. Provide the name or the thumbprint. If not provided a certificate will be generated."
        },
        "Port": {
            "Type": "int",
            "DefaultValue": 443,
            "Description": "The port to bind to."
        },
        "CertPath": {
            "Type": "string",
            "Description": "The physical path on disk where certificates will be stored.",
            "DefaultValue": "c:\\certificates"
        },
        "RootCertFileName": {
            "Type": "string",
            "Description": "The file name of the root certificate to be created.",
            "DefaultValue": "SitecoreRootCert"
        },
        "CertificateName": {
            "Type": "string",
            "Description": "The  name of certificate to be used or created.",
            "DefaultValue": "[parameter('HostHeader')]"
        }
    },
    "Variables": {
        "Client.Cert.Store": "cert:\\LocalMachine\\My",
        "Root.Cert.DnsName": "[concat('DO_NOT_TRUST_', parameter('RootCertFileName'))]",
        "Root.Cert.Store": "cert:\\LocalMachine\\Root",
        "Site.PhysicalPath": "[concat(parameter('WebRoot'),'\\', parameter('SiteName'))]",
        "Site.DataFolder": "[joinpath(variable('Site.PhysicalPath'), 'App_Data')]",
        "Security.CertificateStore": "Cert:\\Localmachine\\My"
    },
    "Tasks": {
        "CreatePaths": {
            "Type": "EnsurePath",
            "Params": {
                "Exists": [
                    "[parameter('CertPath')]"
                ]
            }
        },
        "CreateRootCert": {
            "Type": "NewRootCertificate",
            "Params": {
                "Path": "[parameter('CertPath')]",
                "Name": "[parameter('RootCertFileName')]",
                "StoreLocation": "CurrentUser",
                "DnsName": "[variable('Root.Cert.DnsName')]"
            }
        },
        "ImportRootCertificate": {
            "Type": "ImportCertificate",
            "Params": {
                "CertStoreLocation": "[variable('Root.Cert.Store')]",
                "FilePath": "[concat(joinpath(parameter('CertPath'), parameter('RootCertFileName')), '.crt')]"
            }
        },
        "CreateSignedCert": {
            "Type": "NewSignedCertificate",
            "Params": {
                "Signer": "[GetCertificate(variable('Root.Cert.DnsName'), variable('Root.Cert.Store'))]",
                "Path": "[parameter('CertPath')]",
                "CertStoreLocation": "[variable('Client.Cert.Store')]",
                "Name": "[parameter('CertificateName')]",
                "DnsName": "[parameter('HostHeader')]"
            }
        },
        "CreateBindingsWithThumprint": {
            "Type": "WebBinding",
            "Params": {
                "SiteName": "[parameter('SiteName')]",
                "Add": [{
                    "HostHeader": "[parameter('HostHeader')]",
                    "Protocol": "https",
                    "SSLFlags": 1,
                    "Port": "[parameter('Port')]",
                    "Thumbprint": "[GetCertificateThumbprint(parameter('CertificateName'), variable('Client.Cert.Store'))]"
                }]
            }
        },
        "CreateBindings": {
            "Type": "WebBinding",
            "Params": {
                "SiteName": "[parameter('SiteName')]",
                "Add": [{
                    "HostHeader": "[parameter('HostHeader')]",
                    "Protocol": "http",
                    "Port": "80"
                }]
            }
        },
        "CreateHostHeader": {
            "Type": "HostHeader",
            "Params": {
                "HostName": "[parameter('HostHeader')]"
            }
        }
    }
}